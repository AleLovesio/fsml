fsml ::= <declaration> <fsm> | <fsm>

<declaration> ::= <DECL> <C_CODE>

<fsm> ::= <FSM> <IDENTIFIER> { <fsm-objects-list> }

<fsm-objects-list> ::= <fsm-object>
					 | <fsm-objects-list> <fsm-object>

<fsm-object> ::= <variable-declaration> 
			   | <state>
			   | <until-retry>

<variable-declaration> ::= <variable-specifier> {<type-specifier>}+ <init-declarator> ;

<variable-specifier> ::= <VAR>
					   | <INPUT>
					   | <OUTPUT>

<type-specifier> ::= <VOID>
				   | <CHAR>
				   | <SHORT>
				   | <INT>
				   | <LONG>
				   | <FLOAT>
				   | <DOUBLE>
				   | <SIGNED>
				   | <UNSIGNED>
				   | <struct-or-union-specifier>
				   | <enum-specifier>
				   | <typedef-name>

<struct-or-union-specifier> ::= <struct-or-union> <IDENTIFIER>

<struct-or-union> ::= <STRUCT>
                    | <UNION>

<enum-specifier> ::= <ENUM> <IDENTIFIER>

<typedef-name> ::= <IDENTIFIER>

<init-declarator> ::= <declarator> = <constant>

<declarator> ::= {<pointer>}? <direct-declarator>

<direct-declarator> ::= <IDENTIFIER>

<pointer> ::= * {<pointer>}?

<constant> ::= <INTEGER-CONSTANT>
			 | <CHARACTER-CONSTANT>
			 | <FLOATING-CONSTANT>
			 | <ENUMERATION-CONSTANT>

<state> ::= <STATE> <state-specifier> {<transition-list>}? {<output-list>}? ;

<state-specifier> ::= [ <state-type-list> ] <IDENTIFIER> {<C_CODE>}?

<state-type-list> ::= <state-type>
					| <state-type-list> , <state-type>

<state-type> ::= <START>
			   | <END>
			   | <ERR>

<transition-list> ::= <transition-specifier>
				 	| <transition-list> <transition-specifier>

<transition-specifier> ::= <ON> <transition-condition> {<C_CODE>}? <transition-actuator>

<transition-condition> ::= ( <C_BOOLEAN_EXPR> )

<transition-actuator> ::= <GO> <IDENTIFIER>
						| <ERR> <IDENTIFIER>
						| <RETRY>

<output-list> ::= <output-specifier>
				| <output-list> <output-specifier>

<output-specifier> ::= <OUT> <IDENTIFIER> <C_CODE>

<until-retry> ::= <UNTIL> <until-condition> { <until-object-list> } <transition-actuator> ;

<until-condition> ::= <LB> <INTEGER-CONSTANT> <RB>
					| <LB> <ENUMERATION-CONSTANT> <RB>

<until-object-list> ::= <until-object>
					  | <until-object-list> <until-object>

<until-object> ::= <state> 
				 | <until-retry>



decl {
	<c-code>
}

fsm <name> {

	var <type> <var_name> = <initializer>;
	...

	input <type> <name> = <initializer>;
	...

	output <type> <name> = <initializer>;


	state \[<id> [,<id>...]\] <name> [{ <code> }]
	on ( <condition> ) [{ <code> }] [go <name> | err <err_id> | retry]
	[...]
	[out <name> { <code> }]
	;

	...

	until (<limit>) {
		
		state ... 
	} go <name> | err | retry;

}

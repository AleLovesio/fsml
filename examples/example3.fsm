/* period {
	struct timespec t;
	t->tv_sec = 0;
	t->tv_nsec = 1000000;		// 1 ms period
	return t;
} */

decl {

typedef unsigned char bool;
#define FALSE 0
#define TRUE 1
typedef struct quaternion { float x, y, z; } quaternion_t;

#define MAX_ERROR 			(0.1)
#define MAX_MAN_RETRIES		(3)

#define ADCS_PERIOD			(200)

typedef enum {
	ManeuverState_IDLE,
	ManeuverState_BUSY,
	ManeuverState_COMPLETE,
	ManeuverState_ERR
} maneuver_state_t;

// DUMMY FUNCTIONS
void rtems_clock_get_uptime(struct timespec * t) {}
bool xact_goto_eci_attitude(struct quaternion * q) { return TRUE; }
void xact_get_error(quaternion_t * q) {}
bool is_error_less_than(quaternion_t * q, float e) { return TRUE; }

}


time {
	struct timespec t;
	rtems_clock_get_uptime(&t);
	return t;
}


fsm maneuver {
	
	var bool res = FALSE;
	var quaternion_t q_err = {0};
	var unsigned long int * this_is_a_test = 0;

	input float maneuver_duration = 0.1;
	input struct quaternion * q = NULL;
	output maneuver_state_t man_state = ManeuverState_IDLE;

	timer stable_timer(ADCS_PERIOD);
	timer maneuver_timer(maneuver_duration);


	until (MAX_MAN_RETRIES) {
	
		/* start the maneuver telling the ADCS the target attitude quaternion */
		state [start] START_MAN {
			if (q)
				res = xact_goto_eci_attitude(q);
		}
		on (q == NULL) err MemViolation
		on (res == TRUE) go WAIT_MAN start maneuver_timer
		on (res == FALSE) retry
		out man_state = { return ManeuverState_BUSY; };

		/* wait for the ADCS controller to reach the target with the expected accuracy */
		state WAIT_MAN {
			xact_get_error(&q_err);
		}
		on (is_error_less_than(&q_err, MAX_ERROR)) go WAIT_STABLE start stable_timer
		on timeout(maneuver_timer) retry;

		/* wait the error between the setpoint and the output attitude is stabilized */
		state WAIT_STABLE {
			xact_get_error(&q_err);
		}
		on (!is_error_less_than(&q_err, MAX_ERROR)) go WAIT_MAN
		on timeout(stable_timer) go FINISHED
		on timeout(maneuver_timer) retry;

	} err ManFailed;

	state [end, err] FINISHED
	out man_state = { return this.err() ? ManeuverState_ERR : ManeuverState_COMPLETE; };
}
